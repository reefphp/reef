<style>
.rf-builder {
	display: flex;
	position: relative;
}

.rf-builder-toolbar {
	display: flex;
	flex-direction: column;
	width: 200px;
	background-color: #f7f7fe;
}

.rf-builder-toolbar-general {
	display: flex;
	height: 2rem;
}

.rf-builder-toolbar .rf-builder-toolbar-submit, .rf-builder-toolbar .rf-builder-toolbar-config {
	display: block;
	flex: 1;
	background-color: #c6caed;
	border: 0;
	cursor: pointer;
}

.rf-builder-select {
	flex: 1;
	display: flex;
}

.rf-builder-select .rf-builder-categories {
	flex: 1;
}

.rf-builder-select .rf-builder-category, .rf-builder-select .rf-builder-component {
	height: 100px;
	text-align: center;
	font-size: 9pt;
	display: flex;
	justify-content: center;
	align-items: center;
}

.rf-builder-select .rf-builder-category img, .rf-builder-select  .rf-builder-component img {
	max-width: 50px;
	max-height: 50px;
}

.rf-builder-select .rf-builder-category span, .rf-builder-select  .rf-builder-component span {
	display: block;
}

.rf-builder-select .rf-builder-components {
	flex: 1;
	display: none;
}

.rf-builder-select .rf-builder-components.rf-active {
	display: block;
}

.rf-builder-select .rf-builder-category {
	background-color: #cfd1f9;
	border-bottom: 1px solid #afafd1;
	cursor: pointer;
}

.rf-builder-select .rf-builder-category:hover {
	background-color: #b8bbf3;
}

.rf-builder-select .rf-builder-category.rf-active {
	background-color: #a6aaed;
}

.rf-builder-select .rf-builder-component {
	background-color: #e6e7fe;
	border-bottom: 1px solid #d0d0e9;
	cursor: grab;
}

.rf-builder-select .rf-builder-component:hover {
	background-color: #d8dafb;
}

.rf-builder-component.rf-builder-add-ghost {
	background-color: #f7f7fe;
}

.rf-builder-component.rf-builder-add-ghost img {
	max-width: 25px;
}

.rf-builder-workspace {
	background-color: #fff;
	flex: 1;
}

.rf-builder-workspace .rf-fields {
	height: 100%;
}

.rf-builder-field {
	display: flex;
}

.rf-builder-field-preview {
	flex: 1;
}

.rf-builder-field-actions {
	width: 200px;
	text-align: center;
	margin-bottom: 1rem;
}

.rf-builder-btn {
	display: inline-block;
	background-color: #a6aaed;
	padding: 3px 10px;
	font-size: 20px;
	cursor: pointer;
	border-radius: 3px;
	margin: 1px 3px;
}

.rf-builder-btn:hover {
	background-color: #969add;
}

.rf-builder-template {
	display: none;
}

.rf-builder-dialog {
	position: absolute;
	width: 300px;
	background-color: #fff;
	border: 2px solid #969add;
	z-index: 75;
}

</style>
<script>
// https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript
function unique_id() {
	function s4() {
		return Math.floor((1 + Math.random()) * 0x10000)
		.toString(16)
		.substring(1);
	}
	return s4() + s4() + s4() + s4()+ s4() + s4() + s4() + s4();
}

// https://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex
function escapeRegExp(str) {
	return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}

$(function() {
	$('.rf-builder-category').on('click', function() {
		$('.rf-builder-components').hide().filter('[data-category="'+$(this).data('category')+'"]').show();
		$('.rf-builder-category').removeClass('rf-active');
		$(this).addClass('rf-active');
	});
	
	$('.rf-builder-components').each(function() {
		Sortable.create(this, {
				sort: false,
				group: {
					name: 'component-select',
					pull: 'clone',
					put: false
				},
				ghostClass: 'rf-builder-add-ghost',
				animation: 150
			}
		);
	});
	
	Sortable.create($('.rf-builder-workspace .rf-fields')[0], {
			sort: true,
			group: {
				name: 'component-select',
				pull: false,
				put: true
			},
			handle: '.rf-builder-drag-handle',
			animation: 150,
			onAdd: function(evt) {
				var $item = $(evt.item);
				ReefBuilder.addField($item, evt.newIndex);
			},
			onUpdate: function(evt) {
				ReefBuilder.moveField(evt.oldIndex, evt.newIndex);
			}
		}
	);
	
	$('.rf-builder-toolbar-submit').on('click', function() {
		ReefBuilder.submit();
	});
	
});

var ReefDialog = (function() {
	'use strict';
	
	var ReefDialog = function($dialog, $anchor) {
		var self = this;
		
		this.$dialog = $dialog;
		this.$anchor = $anchor;
		
		$anchor.on('click', function() {
			self.show();
		});
	};
	
	ReefDialog.prototype.toggle = function() {
		if(this.$dialog.is(':visible')) {
			this.hide();
		}
		else {
			this.show();
		}
	};
	
	ReefDialog.prototype.hide = function() {
		this.$dialog.hide();
	};
	
	ReefDialog.prototype.show = function() {
		var self = this;
		var i, left;
		
		// Open dialog & possibly reposition for appearing scroll bars
		for(i=0; i<2; i++) {
			left = this.$anchor.position().left;
			
			left = Math.min(
				left,
				this.$anchor.offsetParent().width() - this.$dialog.outerWidth() - 3
			);
			
			left = Math.max(0, left);
			
			this.$dialog.css({
				left: left,
				top: this.$anchor.position().top + this.$anchor.outerHeight()
			});
			
			if(i == 0) {
				this.$dialog.show();
			}
		}
		
		// Focus first input
		this.$dialog.find('input').first().focus();
		
		// Close on mousedown outside dialog or on ESC press
		setTimeout(function() {
			var namespace = '.rf-builder-dialog-'+unique_id();
			$(document).on('mousedown'+namespace, function(evt) {
				var $target = $(evt.target);
				if(!$target.is(self.$dialog) && !$target.is(self.$anchor) && $target.closest(self.$dialog).length == 0) {
					self.hide();
					$(document).off('mousedown'+namespace);
					$(document).off('keydown'+namespace);
				}
			});
			
			$(document).on('keydown'+namespace, function(evt) {
				if(evt.which === 27) {
					self.hide();
					evt.preventDefault();
					$(document).off('mousedown'+namespace);
					$(document).off('keydown'+namespace);
				}
			});
		}, 0);
		
	};
	
	return ReefDialog;
})();

var ReefBuilder = (function() {
	'use strict';
	
	var ReefBuilder = function() {
		var self = this;
		
		this.fields = [];
		this.reef = null;
		
		$(function() {
			self.reef = new Reef($('.rf-builder-workspace'));
			
			self.configForm = new Reef($('.rf-builder-form-config'));
			
			self.configDialog = new ReefDialog($('.rf-builder-dialog.rf-builder-form-config'), $('.rf-builder-toolbar-config'));
			
			$('.rf-builder-existing-fields .rf-builder-existing-field').each(function(index) {
				self.addField($(this), index);
				$(this).remove();
			});
			$('.rf-builder-workspace .rf-fields').append($('.rf-builder-existing-fields .rf-builder-field'));
		});
	};
	
	ReefBuilder.prototype.getReef = function() {
		return this.reef;
	};
	
	ReefBuilder.prototype.addField = function($item, newIndex) {
		var field = new ReefBuilderField(this);
		field.initFromItem($item);
		this.fields.splice(newIndex, 0, field);
	};
	
	ReefBuilder.prototype.moveField = function(oldIndex, newIndex) {
		if(typeof this.fields[oldIndex] == 'undefined') {
			return;
		}
		
		this.fields.splice(newIndex, 0, this.fields.splice(oldIndex, 1)[0]);
	};
	
	ReefBuilder.prototype.removeField = function(field) {
		var index = this.fields.indexOf(field);
		if(index > -1) {
			this.fields.splice(index, 1);
		}
	};
	
	ReefBuilder.prototype.submit = function() {
		var i;
		
		if(!this.configForm.validate()) {
			this.configDialog.show();
			return false;
		}
		
		for(i in this.fields) {
			if(!this.fields[i].validate()) {
				return false;
			}
		}
		
		// All is valid, gather fields
		var fields = [];
		
		for(i in this.fields) {
			fields.push(this.fields[i].getDefinition());
		}
		
		// Gather all data
		var form_data = {
			'form_id' : $('.rf-builder').data('form_id'),
			'form_config' : this.configForm.getData(),
			'fields' : fields
		};
		
		// Save form
		$.ajax({
			url: $('.rf-builder-toolbar-submit').data('action'),
			method: 'POST',
			data: {
				form_data : form_data
			},
			dataType: 'json',
			success: function(response) {
				if(typeof response == 'object') {
					if(typeof response.result !== 'undefined') {
						
						
					}
					if(typeof response.redirect !== 'undefined') {
						window.location = response.redirect;
					}
				}
			}
		});
	};
	
	return new ReefBuilder();
})();

var ReefBuilderField = (function() {
	'use strict';
	
	var ReefBuilderField = function(reefBuilder) {
		this.reefBuilder = reefBuilder;
		this.componentForm = null;
		this.localeForms = null;
		this.$fieldWrapper = null;
		this.field = null;
		this.$field = null;
	};
	
	ReefBuilderField.prototype.initFromItem = function($item) {
		var self = this;
		
		var existingField = $item.is('.rf-builder-existing-field');
		
		var $fieldWrapper = $('<div class="rf-builder-field"><div class="rf-builder-field-preview"></div><div class="rf-builder-field-actions"><div class="rf-builder-btn rf-builder-drag-handle">&#8661;</div><div class="rf-builder-btn rf-builder-component-config">&#9881;</div><div class="rf-builder-btn rf-builder-component-locale">&#128483;</div><div class="rf-builder-btn rf-builder-component-delete">&times;</div></div><div class="rf-builder-field-templates"></div></div>');
		
		var templates = ['rf-builder-component-form', 'rf-builder-locale-forms'];
		var $template;
		for(var i in templates) {
			$template = $item.find('.rf-builder-template.'+templates[i]).clone().hide().removeClass('rf-builder-template').addClass('rf-builder-dialog');
			$template = $.parseHTML($template[0].outerHTML.replace(new RegExp(escapeRegExp($template.find('.rf-main-config').data('form-idpfx')), 'g'), unique_id()));
			
			$fieldWrapper.find('.rf-builder-field-templates').append($template);
		}
		
		$fieldWrapper.find('.rf-builder-component-form input, .rf-builder-locale-forms input').on('change', function() {
			self.updateField($fieldWrapper);
		});
		
		this.componentForm = new Reef($fieldWrapper.find('.rf-builder-component-form'));
		this.localeForms = new Reef($fieldWrapper.find('.rf-builder-locale-forms'));
		
		this.componentDialog = new ReefDialog($fieldWrapper.find('.rf-builder-component-form'), $fieldWrapper.find('.rf-builder-component-config'));
		this.localeDialog = new ReefDialog($fieldWrapper.find('.rf-builder-locale-forms'), $fieldWrapper.find('.rf-builder-component-locale'));
		
		if(this.componentForm.hasField('name') && !existingField) {
			this.componentForm.getField('name').setValue('field_'+unique_id().substr(0, 16));
		}
		
		$fieldWrapper.find('.rf-builder-component-delete').on('click', function() {
			self.deleteField();
		});
		
		$fieldWrapper.attr('data-component-name', $item.data('component-name'));
		
		$item.replaceWith($fieldWrapper);
		
		this.$fieldWrapper = $fieldWrapper;
		
		this.updateField();
	};
	
	ReefBuilderField.prototype.deleteField = function() {
		this.reefBuilder.removeField(this);
		this.$fieldWrapper.remove();
	};
	
	ReefBuilderField.prototype.updateField = function() {
		var componentName = this.$fieldWrapper.data('component-name');
		
		var template = atob($('.rf-builder-select .rf-builder-component[data-component-name="'+componentName+'"]').data('html'));
		
		var fieldConfig = this.componentForm.getData();
		fieldConfig.locale = this.localeForms.getData();
		
		var component;
		if(Reef.hasComponent(componentName)) {
			component = Reef.getComponent(componentName);
		}
		else {
			component = function(){};
		}
		
		if(component.viewVars) {
			fieldConfig = component.viewVars(fieldConfig);
		}
		
		if(component.getLanguageReplacements) {
			var replacements = component.getLanguageReplacements(fieldConfig);
			for(var i in fieldConfig.locale) {
				fieldConfig.locale[i] = fieldConfig.locale[i].replace(/\[\[([^\[\]]+)\]\]/g, function(match, key) {
					var parts = key.split('.');
					var repl = replacements;
					for(var j in parts) {
						if(typeof repl !== 'object' || typeof repl[parts[j]] === 'undefined') {
							return '';
						}
						repl = repl[parts[j]];
					}
					
					// Most likely, `repl` has now become a string...
					return (typeof repl !== 'object') ? repl : '';
				});
			}
		}
		
		var vars = JSON.parse(atob($('.rf-builder').attr('data-form_config')));
		vars.form_idpfx = unique_id();
		vars.CSSPRFX = 'rf-';
		vars.main_var = 'preview';
		vars.field = fieldConfig;
		
		var html = Mustache.render(template, vars);
		
		this.$fieldWrapper.find('.rf-builder-field-preview').html(html);
		this.$field = this.$fieldWrapper.find('.rf-builder-field-preview .rf-field');
		
		if(Reef.hasComponent(componentName)) {
			this.field = ReefBuilder.getReef().newField(this.$field.data(CSSPRFX+'type'), this.$field);
			this.field.attach();
		}
	};
	
	ReefBuilderField.prototype.validate = function() {
		if(!this.componentForm.validate()) {
			this.componentDialog.show();
			return false;
		}
		if(!this.localeForms.validate()) {
			this.localeDialog.show();
			return false;
		}
		return true;
	};
	
	ReefBuilderField.prototype.getDefinition = function() {
		return {
			component: this.$fieldWrapper.data('component-name'),
			config: this.componentForm.getData(),
			locale: this.localeForms.getData()
		};
	};
	
	return ReefBuilderField;
})();

</script>

<div class="rf-builder" data-form_config="{{formConfig}}" data-form_id="{{form_id}}">
	<div class="rf-builder-toolbar">
		<div class="rf-builder-toolbar-general">
			<button type="button" class="rf-builder-toolbar-submit" data-action="{{settings.submit_action}}">
				Save
			</button>
			<button type="button" class="rf-builder-toolbar-config">
				&#9881;
			</button>
			<div class="rf-builder-dialog rf-builder-form-config" style="display: none;">
				{{{formConfigHtml}}}
			</div>
		</div>
		<div class="rf-builder-select">
			<div class="rf-builder-categories">
			{{#categories}}
				<div class="rf-builder-category {{#open_default}}rf-active{{/open_default}}" data-category="{{category}}">
					<div>
						<img title="" alt="" src="../../assets/img/{{category}}.svg" />
						<span>{{category}}</span>
					</div>
				</div>
			{{/categories}}
			</div>
			
			{{#categories}}
			<div class="rf-builder-components {{#open_default}}rf-active{{/open_default}}" data-category="{{category}}">
				{{#components}}
				<div class="rf-builder-component" data-component-name="{{type}}" data-definition="{{definition}}" data-html="{{html}}">
					<div class="rf-builder-tile">
						<img title="" alt="" src="../../assets/img/{{image}}" />
						<span>{{name}}</span>
					</div>
					<div class="rf-builder-template rf-builder-component-form">
						{{{componentForm}}}
					</div>
					<div class="rf-builder-template rf-builder-locale-forms">
						{{#localeForms}}
						<div class="rf-builder-locale-form" data-locale="{{locale}}">
							{{{form}}}
						</div>
						{{/localeForms}}
					</div>
				</div>
				{{/components}}
			</div>
			{{/categories}}
		</div>
	</div>
	<div class="rf-builder-workspace my-3">
		{{{formHtml}}}
	</div>
	<div class="rf-builder-existing-fields">
		{{#fields}}
		<div class="rf-builder-existing-field" data-component-name="{{type}}" data-config="{{config}}">
			<div class="rf-builder-template rf-builder-component-form">
				{{{componentForm}}}
			</div>
			<div class="rf-builder-template rf-builder-locale-forms">
				{{#localeForms}}
				<div class="rf-builder-locale-form" data-locale="{{locale}}">
					{{{form}}}
				</div>
				{{/localeForms}}
			</div>
		</div>
		{{/fields}}
	</div>
</div>
